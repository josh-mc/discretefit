// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_p
List simulate_p(int type, NumericVector vector_1, NumericVector vec_2_frac, double reps, double tolerance);
RcppExport SEXP _discretefit_simulate_p(SEXP typeSEXP, SEXP vector_1SEXP, SEXP vec_2_fracSEXP, SEXP repsSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vector_1(vector_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    Rcpp::traits::input_parameter< double >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_p(type, vector_1, vec_2_frac, reps, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// chisq_stat
double chisq_stat(int draws, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _discretefit_chisq_stat(SEXP drawsSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_stat(draws, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_setup
IntegerVector RCONT_setup(IntegerVector c_sums);
RcppExport SEXP _discretefit_RCONT_setup(SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_setup(c_sums));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_tab
IntegerVector RCONT_tab(IntegerVector x, int bins, int a, int b);
RcppExport SEXP _discretefit_RCONT_tab(SEXP xSEXP, SEXP binsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_tab(x, bins, a, b));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_simulate
IntegerVector RCONT_simulate(IntegerVector v, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT_simulate(SEXP vSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_simulate(v, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// RCONT
List RCONT(int n, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT(SEXP nSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT(n, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// cpp_shuffle
IntegerVector cpp_shuffle();
RcppExport SEXP _discretefit_cpp_shuffle() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cpp_shuffle());
    return rcpp_result_gen;
END_RCPP
}
// RCONT_setup_cpp
std::vector<int> RCONT_setup_cpp(IntegerVector c_sums);
RcppExport SEXP _discretefit_RCONT_setup_cpp(SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_setup_cpp(c_sums));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_tab_cpp
std::vector<int> RCONT_tab_cpp(std::vector<int> v, int nbins, int a, int b);
RcppExport SEXP _discretefit_RCONT_tab_cpp(SEXP vSEXP, SEXP nbinsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nbins(nbinsSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_tab_cpp(v, nbins, a, b));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_simulate_cpp
IntegerVector RCONT_simulate_cpp(std::vector<int> v, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT_simulate_cpp(SEXP vSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_simulate_cpp(v, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_cpp
List RCONT_cpp(int n, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT_cpp(SEXP nSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_cpp(n, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_cpp2
List RCONT_cpp2(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_RCONT_cpp2(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_cpp2(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_discretefit_simulate_p", (DL_FUNC) &_discretefit_simulate_p, 5},
    {"_discretefit_chisq_stat", (DL_FUNC) &_discretefit_chisq_stat, 3},
    {"_discretefit_RCONT_setup", (DL_FUNC) &_discretefit_RCONT_setup, 1},
    {"_discretefit_RCONT_tab", (DL_FUNC) &_discretefit_RCONT_tab, 4},
    {"_discretefit_RCONT_simulate", (DL_FUNC) &_discretefit_RCONT_simulate, 3},
    {"_discretefit_RCONT", (DL_FUNC) &_discretefit_RCONT, 3},
    {"_discretefit_cpp_shuffle", (DL_FUNC) &_discretefit_cpp_shuffle, 0},
    {"_discretefit_RCONT_setup_cpp", (DL_FUNC) &_discretefit_RCONT_setup_cpp, 1},
    {"_discretefit_RCONT_tab_cpp", (DL_FUNC) &_discretefit_RCONT_tab_cpp, 4},
    {"_discretefit_RCONT_simulate_cpp", (DL_FUNC) &_discretefit_RCONT_simulate_cpp, 3},
    {"_discretefit_RCONT_cpp", (DL_FUNC) &_discretefit_RCONT_cpp, 3},
    {"_discretefit_RCONT_cpp2", (DL_FUNC) &_discretefit_RCONT_cpp2, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_discretefit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
