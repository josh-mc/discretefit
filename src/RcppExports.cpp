// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_p
List simulate_p(int type, NumericVector vector_1, NumericVector vec_2_frac, double reps, double tolerance);
RcppExport SEXP _discretefit_simulate_p(SEXP typeSEXP, SEXP vector_1SEXP, SEXP vec_2_fracSEXP, SEXP repsSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vector_1(vector_1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    Rcpp::traits::input_parameter< double >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_p(type, vector_1, vec_2_frac, reps, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// ind_sim
double ind_sim(int reps, IntegerVector r_sums, IntegerVector c_sums, NumericVector E, int seed, double statistic, double tolerance);
RcppExport SEXP _discretefit_ind_sim(SEXP repsSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP ESEXP, SEXP seedSEXP, SEXP statisticSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_sim(reps, r_sums, c_sums, E, seed, statistic, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// ind_sim2
double ind_sim2(int reps, IntegerVector r_sums, IntegerVector c_sums, NumericVector E, int seed, double statistic, double tolerance);
RcppExport SEXP _discretefit_ind_sim2(SEXP repsSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP ESEXP, SEXP seedSEXP, SEXP statisticSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_sim2(reps, r_sums, c_sums, E, seed, statistic, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// ind_fixed
double ind_fixed(int reps, IntegerVector r_sums, IntegerVector c_sums, NumericVector E, int seed, double statistic, double tolerance);
RcppExport SEXP _discretefit_ind_fixed(SEXP repsSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP ESEXP, SEXP seedSEXP, SEXP statisticSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type E(ESEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type statistic(statisticSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_fixed(reps, r_sums, c_sums, E, seed, statistic, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// chisq_stat
double chisq_stat(int draws, NumericVector vec_1_frac, NumericVector vec_2_frac);
RcppExport SEXP _discretefit_chisq_stat(SEXP drawsSEXP, SEXP vec_1_fracSEXP, SEXP vec_2_fracSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type draws(drawsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_1_frac(vec_1_fracSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vec_2_frac(vec_2_fracSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_stat(draws, vec_1_frac, vec_2_frac));
    return rcpp_result_gen;
END_RCPP
}
// rcont_j_par_pcg
List rcont_j_par_pcg(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_j_par_pcg(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_j_par_pcg(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_cpp
List rcont_cpp(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_cpp(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_cpp(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_j
List rcont_j(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_j(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_j(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_j_par
List rcont_j_par(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_j_par(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_j_par(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_cpp2
List rcont_cpp2(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_cpp2(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_cpp2(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_r
List rcont_r(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_r(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_r(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_r2
List rcont_r2(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_r2(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_r2(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// rcont_r3
List rcont_r3(int n, IntegerVector r_sums, IntegerVector c_sums);
RcppExport SEXP _discretefit_rcont_r3(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont_r3(n, r_sums, c_sums));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_setup
IntegerVector RCONT_setup(IntegerVector c_sums);
RcppExport SEXP _discretefit_RCONT_setup(SEXP c_sumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_setup(c_sums));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_tab
IntegerVector RCONT_tab(IntegerVector v, int bins, int a, int b);
RcppExport SEXP _discretefit_RCONT_tab(SEXP vSEXP, SEXP binsSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type bins(binsSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_tab(v, bins, a, b));
    return rcpp_result_gen;
END_RCPP
}
// RCONT_simulate
IntegerVector RCONT_simulate(IntegerVector v, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT_simulate(SEXP vSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT_simulate(v, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// RCONT
List RCONT(int n, IntegerVector r_sum, IntegerVector c_sum);
RcppExport SEXP _discretefit_RCONT(SEXP nSEXP, SEXP r_sumSEXP, SEXP c_sumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sum(r_sumSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sum(c_sumSEXP);
    rcpp_result_gen = Rcpp::wrap(RCONT(n, r_sum, c_sum));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_j
IntegerVector shuffle_j(IntegerVector x, int seed);
RcppExport SEXP _discretefit_shuffle_j(SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_j(x, seed));
    return rcpp_result_gen;
END_RCPP
}
// test_cpp2
List test_cpp2(int n, int x);
RcppExport SEXP _discretefit_test_cpp2(SEXP nSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_cpp2(n, x));
    return rcpp_result_gen;
END_RCPP
}
// test_pcg
void test_pcg(int x);
RcppExport SEXP _discretefit_test_pcg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    test_pcg(x);
    return R_NilValue;
END_RCPP
}
// test_mt
void test_mt(int x);
RcppExport SEXP _discretefit_test_mt(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    test_mt(x);
    return R_NilValue;
END_RCPP
}
// test_splitmix
void test_splitmix(int x);
RcppExport SEXP _discretefit_test_splitmix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    test_splitmix(x);
    return R_NilValue;
END_RCPP
}
// test_xorshift
void test_xorshift(int x);
RcppExport SEXP _discretefit_test_xorshift(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    test_xorshift(x);
    return R_NilValue;
END_RCPP
}
// test_rcpp
void test_rcpp(int x);
RcppExport SEXP _discretefit_test_rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    test_rcpp(x);
    return R_NilValue;
END_RCPP
}
// shuffle_cpp_pcg
Rcpp::IntegerVector shuffle_cpp_pcg(Rcpp::IntegerVector x);
RcppExport SEXP _discretefit_shuffle_cpp_pcg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_cpp_pcg(x));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_j_pcg
IntegerVector shuffle_j_pcg(IntegerVector x);
RcppExport SEXP _discretefit_shuffle_j_pcg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_j_pcg(x));
    return rcpp_result_gen;
END_RCPP
}
// rcont32_cpp
List rcont32_cpp(int n, IntegerVector r_sums, IntegerVector c_sums, int seed);
RcppExport SEXP _discretefit_rcont32_cpp(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont32_cpp(n, r_sums, c_sums, seed));
    return rcpp_result_gen;
END_RCPP
}
// rcont31_cpp
List rcont31_cpp(int n, IntegerVector r_sums, IntegerVector c_sums, int seed);
RcppExport SEXP _discretefit_rcont31_cpp(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont31_cpp(n, r_sums, c_sums, seed));
    return rcpp_result_gen;
END_RCPP
}
// rcont3_cpp
List rcont3_cpp(int n, IntegerVector r_sums, IntegerVector c_sums, int seed);
RcppExport SEXP _discretefit_rcont3_cpp(SEXP nSEXP, SEXP r_sumsSEXP, SEXP c_sumsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type r_sums(r_sumsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_sums(c_sumsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(rcont3_cpp(n, r_sums, c_sums, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_discretefit_simulate_p", (DL_FUNC) &_discretefit_simulate_p, 5},
    {"_discretefit_ind_sim", (DL_FUNC) &_discretefit_ind_sim, 7},
    {"_discretefit_ind_sim2", (DL_FUNC) &_discretefit_ind_sim2, 7},
    {"_discretefit_ind_fixed", (DL_FUNC) &_discretefit_ind_fixed, 7},
    {"_discretefit_chisq_stat", (DL_FUNC) &_discretefit_chisq_stat, 3},
    {"_discretefit_rcont_j_par_pcg", (DL_FUNC) &_discretefit_rcont_j_par_pcg, 3},
    {"_discretefit_rcont_cpp", (DL_FUNC) &_discretefit_rcont_cpp, 3},
    {"_discretefit_rcont_j", (DL_FUNC) &_discretefit_rcont_j, 3},
    {"_discretefit_rcont_j_par", (DL_FUNC) &_discretefit_rcont_j_par, 3},
    {"_discretefit_rcont_cpp2", (DL_FUNC) &_discretefit_rcont_cpp2, 3},
    {"_discretefit_rcont_r", (DL_FUNC) &_discretefit_rcont_r, 3},
    {"_discretefit_rcont_r2", (DL_FUNC) &_discretefit_rcont_r2, 3},
    {"_discretefit_rcont_r3", (DL_FUNC) &_discretefit_rcont_r3, 3},
    {"_discretefit_RCONT_setup", (DL_FUNC) &_discretefit_RCONT_setup, 1},
    {"_discretefit_RCONT_tab", (DL_FUNC) &_discretefit_RCONT_tab, 4},
    {"_discretefit_RCONT_simulate", (DL_FUNC) &_discretefit_RCONT_simulate, 3},
    {"_discretefit_RCONT", (DL_FUNC) &_discretefit_RCONT, 3},
    {"_discretefit_shuffle_j", (DL_FUNC) &_discretefit_shuffle_j, 2},
    {"_discretefit_test_cpp2", (DL_FUNC) &_discretefit_test_cpp2, 2},
    {"_discretefit_test_pcg", (DL_FUNC) &_discretefit_test_pcg, 1},
    {"_discretefit_test_mt", (DL_FUNC) &_discretefit_test_mt, 1},
    {"_discretefit_test_splitmix", (DL_FUNC) &_discretefit_test_splitmix, 1},
    {"_discretefit_test_xorshift", (DL_FUNC) &_discretefit_test_xorshift, 1},
    {"_discretefit_test_rcpp", (DL_FUNC) &_discretefit_test_rcpp, 1},
    {"_discretefit_shuffle_cpp_pcg", (DL_FUNC) &_discretefit_shuffle_cpp_pcg, 1},
    {"_discretefit_shuffle_j_pcg", (DL_FUNC) &_discretefit_shuffle_j_pcg, 1},
    {"_discretefit_rcont32_cpp", (DL_FUNC) &_discretefit_rcont32_cpp, 4},
    {"_discretefit_rcont31_cpp", (DL_FUNC) &_discretefit_rcont31_cpp, 4},
    {"_discretefit_rcont3_cpp", (DL_FUNC) &_discretefit_rcont3_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_discretefit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
